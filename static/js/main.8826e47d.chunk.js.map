{"version":3,"sources":["Components/Header/Header.js","Components/Navigation/NavigationBar.js","Components/Card/CardList.js","App.js","serviceWorker.js","index.js"],"names":["HeaderInput","onInputChange","event","onTotalChange","_this","props","target","value","react_default","a","createElement","onChange","this","type","className","placeholder","Component","Header","_ref","sumOfPer","Header_HeaderInput","concat","NavigationBar","createCard","onClick","Card","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","setState","percentage","onPercentageChange","database","id","Number","updatePerc","state","name","total","toFixed","CardList","accounts","map","account","i","CardList_Card","key","App","nwDatabase","reduce","inpuTotal","totalMoney","Components_Header_Header","Card_CardList","Navigation_NavigationBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8826e47d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst Header =({ onTotalChange, sumOfPer})=> {\r\n\t\r\n\treturn (\r\n\t\t<div className=\"header\">\r\n\t\t\t<h1 className=\"header_title\">Savings Calculator</h1>\r\n\t\t\t<HeaderInput className=\"header_input\" onTotalChange={onTotalChange}/>\r\n\t\t\t<div>\r\n\t\t\t\t<p>{`Current Percentage: ${sumOfPer}%`}</p>\r\n\t\t\t</div>\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nclass HeaderInput extends Component {\r\n\r\n\tonInputChange =(event)=> {\r\n\t\tconst { onTotalChange } = this.props;\r\n\t\tonTotalChange(event.target.value);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<input onChange={this.onInputChange} type=\"number\" className=\"header_input\" placeholder=\"type total...\"/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst NavigationBar =({ createCard })=> {\r\n\treturn ( \r\n\t\t<div className=\"navigation\">\r\n\t\t\t\t<button onClick={createCard} className=\"navigation_button\">+</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default NavigationBar;","import React, { Component } from \"react\";\r\n\r\nconst CardList =({accounts, total, database, updatePerc})=> {\r\n\treturn (\r\n\t\t<div className=\"cardlist\">\r\n\t\t\t{\r\n\t\t\t\taccounts.map((account, i)=> {\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<Card key={i}\r\n\t\t\t\t\t\tid={accounts[i].id}\r\n\t\t\t\t\t\tname={accounts[i].name}\r\n\t\t\t\t\t\tpercentage={accounts[i].percentage}\r\n\t\t\t\t\t\ttotal={total}\r\n\t\t\t\t\t\tdatabase = {database}\r\n\t\t\t\t\t\tupdatePerc={updatePerc}\r\n\t\t\t\t\t\t/> \r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nclass Card extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tpercentage: 0,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount =()=> {\r\n\t\tthis.setState({ percentage: this.props.percentage / 100 })\r\n\t}\r\n\r\n\tonPercentageChange =(event)=> {\r\n\t\tthis.setState({ percentage: event.target.value / 100 });\r\n\t\tthis.props.database[this.props.id].percentage = Number(event.target.value);\r\n\t\tthis.props.updatePerc(this.props.database);\r\n }\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"card\">\r\n\t\t\t\t<p className=\"cardName\">{this.props.name}</p>\r\n\t\t\t\t<input \r\n\t\t\t\t\tclassName=\"Card_input\" \r\n\t\t\t\t\ttype=\"number\" \r\n\t\t\t\t\tplaceholder= {((this.props.percentage >= 0) ? this.props.percentage : '...') + \"%\"}\r\n\t\t\t\t\tonChange={this.onPercentageChange} \r\n\t\t\t\t/>\t\r\n\t\t\t\t<p className=\"cardTotal\">{\"$\"+(this.props.total * this.state.percentage).toFixed(2)}</p>\r\n\t\t\t  </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./Components/Header/Header.js\";\nimport NavigationBar from \"./Components/Navigation/NavigationBar.js\";\nimport CardList from \"./Components/Card/CardList.js\";\n\n\nconst database = [\n  {\n    id: 0,\n    name: 'Emergency',\n    percentage: 11,\n  }, \n  {\n    id: 1,\n    name: 'Investing',\n    percentage: 30,\n  },\n  {\n    id: 2,\n    name: 'School',\n    percentage: 26,\n  },\n  {\n    id: 3,\n    name: 'Car',\n    percentage: 11,\n  }, \n  {\n    id: 4,\n    name: 'Computer',\n    percentage: 10,\n  }, \n  {\n    id: 5,\n    name: 'Dating',\n    percentage: 6,\n  },  \n  {\n    id: 6,\n    name: 'Personal Expenses',\n    percentage: 6,\n  }, \n]\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      totalMoney: 0,\n      sumOfPer: 100,\n    }\n  } \n\n  updatePerc =(nwDatabase)=> {\n    let sumOfPer = nwDatabase.map(account => account.percentage).reduce((total, percentage) => total + percentage);\n    this.setState({ sumOfPer: sumOfPer })\n  }\n  \n  onTotalChange =(inpuTotal)=> {\n    this.setState({ totalMoney: inpuTotal });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Header onTotalChange={this.onTotalChange} sumOfPer={this.state.sumOfPer}/>\n        <div className=\"body_cardContainer gridCont\">\n          <CardList accounts={database} total = {this.state.totalMoney} database={database} updatePerc={this.updatePerc}/>\n          <NavigationBar createCard={this.createCard}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\nexport {database};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}